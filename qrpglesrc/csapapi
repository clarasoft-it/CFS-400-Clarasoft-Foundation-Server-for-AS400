      /////////////////////////////////////////////////////////////////////////////////
      //
      //    Common Service Access Protocol
      //
      //    CSAPAPI
      //    CSAP Application Programming Interface
      //    Version 1.0.0
      //
      //    Compile module with:
      //
      //       CRTSQLRPGI OBJ(CSAPAPI) SRCMBR(CSAPAPI) OBJTYPE(*MODULE)
      //                  DBGVIEW(*SOURCE)
      //
      //    Build program with:
      //
      //       CRTSRVPGM SRVPGM(CSAPAPI) EXPORT(*ALL)
      //          BNDSRVPGM((CFSAPI CTBASE))
      //
      //
      //    Distributed under the MIT license
      //
      //    Copyright (c) 2013 Clarasoft I.T. Solutions Inc.
      //
      //    Permission is hereby granted, free of charge, to any person obtaining
      //    a copy of this software and associated documentation files
      //    (the "Software"), to deal in the Software without restriction,
      //    including without limitation the rights to use, copy, modify,
      //    merge, publish, distribute, sublicense, and/or sell
      //    copies of the Software, and to permit persons to whom the Software is
      //    furnished to do so, subject to the following conditions:
      //    The above copyright notice and this permission notice shall be
      //    included in all copies or substantial portions of the Software.
      //    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
      //    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      //    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      //    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
      //    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
      //    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
      //    THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      //
      /////////////////////////////////////////////////////////////////////////////////

     H NOMAIN

     FCSAPCDIR  IF   E           K DISK

      /INCLUDE CTBASEH
      /INCLUDE CFSAPIH
      /include CTJSNH

      *---------------------------------------------------------------
      * CSAP Error domains
      *---------------------------------------------------------------
     DCSAP_OPEN...
     D                 C                   Const(x'00010000')
     DCSAP_SND...
     D                 C                   Const(x'00020000')
     DCSAP_RECV...
     D                 C                   Const(x'00030000')
     DCSAP_CLOSE...
     D                 C                   Const(x'00040000')
      *---------------------------------------------------------------
      * CSAP Error codes
      *---------------------------------------------------------------
     DCSAP_TIMEOUT...
     D                 C                   Const(x'00000002')
     DCSAP_FATALERROR...
     D                 C                   Const(x'00000999')
     DCSAP_BUFFERERROR...
     D                 C                   Const(x'00000004')
     DCSAP_NODATA...
     D                 C                   Const(x'00000005')
     DCSAP_SRVNOTFOUND...
     D                 C                   Const(x'00000006')
     DCSAP_HOSTNOTFOUND...
     D                 C                   Const(x'00000007')
     DCSAP_INVALIDADDRESS...
     D                 C                   Const(x'00000008')
     DCSAP_SOCKETFAILURE...
     D                 C                   Const(x'00000009')
     DCSAP_CONNECTFAILURE...
     D                 C                   Const(x'00000010')
     DCSAP_SRVNOTREG...
     D                 C                   Const(x'00000011')
     DCSAP_SRVFAULT...
     D                 C                   Const(x'00000012')
     DCSAP_SOSENDFAILURE...
     D                 C                   Const(x'00000013')
     DCSAP_SORECVFAILURE...
     D                 C                   Const(x'00000014')
     DCSAP_INCOMPLETEDATA...
     D                 C                   Const(x'00000015')

      *---------------------------------------------------------------
      * Payload format
      *---------------------------------------------------------------

     DCSAP_FMT_TEXT...
     D                 C                   Const(x'00000000')
     DCSAP_FMT_BINARY...
     D                 C                   Const(x'00000001')

      *---------------------------------------------------------------
      * Security flags
      *---------------------------------------------------------------
     DCSAP_SECURITY_NONE...
     D                 C                   Const(x'00000000')
     DCSAP_SECURITY_SSL...
     D                 C                   Const(x'00000001')

      *---------------------------------------------------------------
      * Data structures
      *---------------------------------------------------------------

     DCSAP_Session...
     D                 DS                  Qualified
     DSessionID                      32A
     DVersion                        10A

     DCSAP_CtlFrame...
     D                 DS                  Qualified
     DCtlCode                         3A
     DUserRef                        32A
     DDataFrameSize                  10I 0
     DUserCtlSize                    10I 0
     DBytesAvail                     10I 0

      *----------------------------------------------------------------------
      *  CSAP Implemetation
      *----------------------------------------------------------------------

     DIWSCKVtbl        DS                  Qualified
     DClose                            *   ProcPtr
     DGetData                          *   ProcPtr
     DOpen                             *   ProcPtr
     DReceive                          *   ProcPtr
     DSend                             *   ProcPtr

     D CSAP_Instance...
     D                 DS                  Qualified
     DlpVtbl                           *
     DServiceName                    64A
     DSessionID                      32A
     DpUserCtl                         *
     DUserCtlSize                    10I 0
     DpDataFrame                       *
     DDataFrameSize                  10I 0
     DDataFrameOffset                10I 0
     DpResponseFrame...
     D                                 *
     DResponseFrameSize...
     D                               10I 0
     DpCONN                            *
     DpJsonIn                          *
     DpJsonOut                         *
     DpBuffer                          *

     DCSAP_PRIVATE_MemCpy...
     D                 PR                  ExtProc('memcpy')
     D@To                              *   Value
     D@From                            *   Value
     D@Len                           10I 0 Value

     DCSAP_PRIVATE_MemSet...
     D                 PR                  ExtProc('memset')
     D@To                              *   Value
     D@Value                          3I 0 Value
     D@Len                           10I 0 Value

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_Constructor...
     P                 B                   EXPORT
     D                 PI              *

     DThis             S               *
     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(This)

      /Free

          This = %Alloc(%Size(CSAP_Instance));

          CSAP_PRIVATE_MemSet(This: 0:
                              %Size(CSAP_Instance));

          Instance.pDataFrame = CTBUFF_Constructor();
          Instance.DataFrameOffset = 1;
          Instance.pResponseFrame = CTLST_Constructor();
          Instance.pCONN = *Null;
          instance.pUserCtl = *Null;

          Instance.pJsonOut = CTJSO_Constructor();
          Instance.pJsonIn  = CTJSP_Constructor();
          Instance.pBuffer  = CTBUFF_Constructor();

          Return This;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_Destructor...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

      /Free

          If (@This <> *Null);

            CTBUFF_Destructor(Instance.pBuffer);
            CTBUFF_Destructor(Instance.pDataFrame);
            CTLST_Destructor(Instance.pResponseFrame);
            CTJSO_Destructor(Instance.pJsonOut);
            CTJSP_Destructor(Instance.pJsonIn);

            Dealloc @This;
            @This = *Null;

          EndIf;

          Return CS_SUCCESS;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_OpenChannel...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@ServiceName                   64A   Value
     D@SessionID                     32A   Value
     D@ConnectionHandle...
     D                                 *   Value
     D@Interface...
     D                                 *   Value
     D@UserData...
     D                                 *   Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)
     DValues           S               *
     DValue            S             64A
     DValueSize        S             10I 0

      /Free

          Instance.ServiceName = @ServiceName;
          Instance.SessionID   = @SessionID;
          Instance.pCONN       = @ConnectionHandle;
          Instance.lpVtbl      = @Interface;

          Return CS_SUCCESS;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_CloseChannel...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

      /Free

          Return CS_SUCCESS;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_Receive...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@CtlFrame                            LikeDS(CSAP_CtlFrame)

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

     DVtbl             DS                  LikeDS(IWSCKVtbl)
     D                                     Based(Instance.lpVtbl)

     DReceive...
     D                 Pr            10I 0   ExtProc(Vtbl.Receive)
     D@This                            *     Value
     D@DataSize                        *     Value
     D@TimeOut                       10I 0   Value

     DGetData...
     D                 Pr            10I 0   ExtProc(Vtbl.GetData)
     D@This                            *     Value
     D@Data                            *     Value
     D@Offset                        10I 0   Value
     D@Size                          10I 0   Value

     DhResult          S             10I 0
     DBytes            S             10I 0
     DSize             S             10I 0
     DDataSize         S             20U 0
     DRc               S             10I 0
     DSSLResult        S             10I 0
     DBuffer           S               *
     DJsonData         DS                  LikeDS(CTJSP_DATA)

      /Free

         Clear @CtlFrame;
         hResult = CS_SUCCESS;

         Receive(Instance.pCONN:
                 %Addr(DataSize):
                 -1);

         If %bitand(Rc: CS_MASK_ERROR) = CS_SUCCESS;

           If dataSize > 0;

             Buffer = %Alloc(DataSize);
             GetData(Instance.pConn:
                     Buffer:
                     0:
                     DataSize);

             // Control block is in JSON
             CTBUFF_Set(Instance.pBuffer: Buffer: dataSize);
             Dealloc Buffer;

             Rc = CTJSP_Parse(Instance.pJsonIn: Instance.pBuffer);

             If Rc = CS_SUCCESS;

               Clear @CtlFrame.CtlCode;

               Rc = CTJSP_Lookup(Instance.pJsonIn:
                                  '/control/ctlcode':
                                  JsonData);

               If Rc = CS_SUCCESS;
                 CSAP_PRIVATE_MemCpy(%Addr(@CtlFrame.CtlCode):
                                     Jsondata.Value: JsonData.Size);
               EndIf;

               Clear @CtlFrame.UserRef;

               Rc = CTJSP_Lookup(Instance.pJsonIn:
                                  '/control/userref':
                                  JsonData);

               If Rc = CS_SUCCESS;

                 CSAP_PRIVATE_MemCpy(%Addr(@CtlFrame.Userref):
                                     Jsondata.Value: JsonData.Size);
               EndIf;

               Rc = CTJSP_Lookup(Instance.pJsonIn:
                                  '/control/userctl':
                                  JsonData);

               If Rc = CS_SUCCESS;

                 Instance.UserCtlSize = JsonData.Size;

                 If (instance.pUserCtl <> *Null);
                   Dealloc Instance.pUserCtl;
                 EndIf;

                 If Instance.UserCtlSize > 0;

                   Instance.pUserCtl = %Alloc(Instance.UserCtlSize);

                   CSAP_PRIVATE_MemCpy(Instance.pUserCtl:
                                     Jsondata.Value: JsonData.Size);
                 Else;
                   Instance.pUserCtl = *Null;
                 EndIf;

               Else;
                 Instance.pUserCtl = *Null;
                 Instance.UserCtlSize = 0;
               EndIf;

               @CtlFrame.UserCtlSize = Instance.UserCtlSize;

             Else;

               // No control frame
               return CS_FAILURE;

             EndIf;

           Else;

             // CSAP protocol not implemented; we are done
             return CS_FAILURE;

           EndIf;

           Instance.DataFrameSize = 0;
           Instance.DataFrameOffset = 1;
           CTBUFF_Set(Instance.pDataFrame: *Null: 0);

           Rc = Receive(Instance.pCONN:
                        %Addr(DataSize):
                        -1);

           If %Bitand(Rc: CSWSCK_MASK_ERROR) = CS_SUCCESS;

             Instance.DataFrameSize += DataSize;

             if DataSize > 0;

               Buffer = %Alloc(DataSize);
               GetData(Instance.pCONN:
                       Buffer:
                       0:
                       DataSize);

               CTBUFF_Cat(Instance.pDataFrame: Buffer: DataSize);
               Dealloc Buffer;

             EndIf;

             Dow %Bitand(Rc: CSWSCK_MASK_DIAG) = CSWSCK_MOREDATA;

               Rc = Receive(Instance.pCONN:
                            %Addr(DataSize):
                            -1);

               If %Bitand(Rc: CSWSCK_MASK_ERROR) = CS_SUCCESS;

                 If %Bitand(Rc: CSWSCK_MASK_OPERATION) =
                                         CSWSCK_OPER_CONTINUATION;

                   Instance.DataFrameSize += DataSize;

                   if DataSize > 0;

                     Buffer = %Alloc(DataSize);
                     GetData(Instance.pCONN:
                             Buffer:
                             0:
                             DataSize);

                     CTBUFF_Cat(Instance.pDataFrame: Buffer: DataSize);
                     Dealloc Buffer;

                   EndIf;

                 Else;

                   hResult = CS_FAILURE;
                   Leave;

                 EndIf;

               Else;

                 hResult = CS_FAILURE;
                 Leave;

               EndIf;

             EndDo;

           Else;

             hResult = CS_FAILURE;

           EndIf;

           If hResult = CS_SUCCESS;

             @CtlFrame.BytesAvail = CTBUFF_Length(Instance.pDataFrame);
             @CtlFrame.DataFrameSize = @CtlFrame.BytesAvail;
           EndIf;

         Else;

           // Could not read client
           hResult = CS_FAILURE + CSAP_RECV + CSAP_SORECVFAILURE;

         EndIf;

         Return hResult;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_GetData...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Buffer                          *   Value
     D@Size                          10I 0

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)
     DhResult          S             10I 0

      /Free

         If @Size <= 0;
           @Size = 0;
           Return CS_FAILURE;
         EndIf;

         hResult = CS_FAILURE;
         If (Instance.DataFrameOffset <= Instance.DataFrameSize);

           If (@Size >
               (Instance.DataFrameSize - Instance.DataFrameOffset + 1));
             @Size = Instance.DataFrameSize - Instance.DataFrameOffset + 1;
           EndIf;

           hResult = CS_SUCCESS;

           CTBUFF_Get(Instance.pDataFrame:
                      @Buffer:
                      Instance.DataFrameOffset:
                      @Size);

           Instance.DataFrameOffset += @Size;

         EndIf;

         Return hResult;

      /End-Free
     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_GetUserCtl...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Buffer                          *   Value
     D@Size                          10I 0

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)
     DhResult          S             10I 0

      /Free

         If @Size <= 0;
           Return CS_FAILURE;
         EndIf;

         If (@Size > Instance.UserCtlSize);
           @Size = Instance.UserCtlSize;
         EndIf;

         CSAP_PRIVATE_MemCpy(@Buffer: Instance.pUserCtl: @Size);

         Return CS_SUCCESS;

      /End-Free
     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_PutData...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Buffer                          *   Value
     D@Size                          10I 0 Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

     DhResult          S             10I 0

      /Free

        Instance.ResponseFrameSize += @Size;
        CTLST_Insert(Instance.pResponseFrame:
                     @Buffer:
                     @Size:
                     CTLST_BOTTOM);

        Return CS_SUCCESS;

      /End-Free
     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_Send...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@UserCtl                         *   Value
     D@Size                          10I 0 Value
     D@UserRef                       32A   Value
     D@DataFmt                       10I 0 Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

     DVtbl             DS                  LikeDS(IWSCKVtbl)
     D                                     Based(Instance.lpVtbl)

     DSend...
     D                 Pr            10I 0   ExtProc(Vtbl.Send)
     D@This                            *     Value
     DOperation                      10I 0   Value
     D@Data                            *     Value
     D@DataSize                      10I 0   Value
     D@FinState                      10I 0   Value
     D@TimeOut                       10I 0   Value

     DhResult          S             10I 0
     DCount            S             10I 0
     Di                S             10I 0
     DDataSize         S             20U 0
     DSize             S             10I 0
     DFrameSize        S             10I 0
     DBytes            S             10I 0
     DSSLResult        S             10I 0
     DData             S               *
     DRc               S             10I 0
     DFormat           S             10I 0
     DFinState         S             10I 0
     DString           S             64A

      /Free

         hResult = CS_FAILURE;

         // Build the Control Frame and send it

         CTJSO_Init(Instance.pJsonOut: JSON_TYPE_OBJECT);
         CTJSO_MkDir(Instance.pJsonOut: '/': 'control': JSON_TYPE_OBJECT);

         String = 'USR';
         Size = 3;

         CTJSO_InsertString(Instance.pJsonOut: '/control': 'ctlcode':
                             %Addr(String): Size);

         // Use the reference sent by the client CSAP layer
         // To match this data segment with the one previously read

         Size = %Len(%Trim(@UserRef));

         If Size > 0;
           CTJSO_InsertString(Instance.pJsonOut: '/control': 'userref':
                               %Addr(@UserRef): Size);
         EndIf;

         If @UserCtl <> *Null And @Size > 0;
           CTJSO_InsertString(Instance.pJsonOut: '/control': 'userctl':
                               @UserCtl: @Size);
         EndIf;

         CTJSO_Serialize(Instance.pJsonOut: '/': Instance.pBuffer);
         Size = CTBUFF_Length(Instance.pBuffer);
         Data = %Alloc(Size);
         CTBUFF_Get(Instance.pBuffer: Data: 1: Size);
         DataSize = Size;

         Rc = Send(Instance.pCONN:
                   CSWSCK_OPER_TEXT:
                   Data:
                   DataSize:
                   CSWSCK_FIN_ON:
                   -1);

         Dealloc Data;

         If %bitand(Rc: CS_MASK_ERROR) = CS_SUCCESS;

           Select;
             When @DataFmt = CSAP_FMT_BINARY;
               Format = CSWSCK_OPER_BINARY;
             Other;
               Format = CSWSCK_OPER_TEXT;
           EndSl;

           // Send the data
           Count = CTLST_Count(Instance.pResponseFrame);

           hResult = CS_SUCCESS;

           If Count > 0;

             If Count = 1;

               Size = CTLST_ItemSize(Instance.pResponseFrame: i);

               If Size > 0;

                 Data = %Alloc(Size);
                 CTLST_Get(Instance.pResponseFrame: Data: Size: i);
                 FinState = CSWSCK_FIN_ON;
                 DataSize = Size; // cannot cast in RPG

                 Rc = Send(Instance.pCONN:
                           Format:
                           Data:
                           DataSize:
                           CSWSCK_FIN_ON:
                           -1);

                 Dealloc Data;

                 If %bitand(Rc: CS_MASK_ERROR) = CS_FAILURE;
                   // Failure to send all data
                   hResult = CS_FAILURE;
                 EndIf;

               EndIf;

             Else;

               Size = CTLST_ItemSize(Instance.pResponseFrame: i);

               If Size > 0;

                 Data = %Alloc(Size);
                 CTLST_Get(Instance.pResponseFrame: Data: Size: i);
                 DataSize = Size; // cannot cast in RPG
                 Rc = Send(Instance.pCONN:
                           Format:
                           Data:
                           DataSize:
                           CSWSCK_FIN_OFF:
                           -1);

                 Dealloc Data;

                 If %bitand(Rc: CS_MASK_ERROR) = CS_FAILURE;
                   // Failure to send all data
                   hResult = CS_FAILURE;
                 EndIf;

               EndIf;

               If hResult = CS_SUCCESS;

                 For i=2 To Count-1 By 1;

                   Size = CTLST_ItemSize(Instance.pResponseFrame: i);

                   If Size > 0;

                     Data = %Alloc(Size);
                     CTLST_Get(Instance.pResponseFrame: Data: Size: i);
                     DataSize = Size; // cannot cast in RPG

                     Rc = Send(Instance.pCONN:
                               CSWSCK_OPER_CONTINUATION:
                               Data:
                               DataSize:
                               CSWSCK_FIN_OFF:
                               -1);

                     Dealloc Data;

                     If %bitand(Rc: CS_MASK_ERROR) = CS_FAILURE;
                       // Failure to send all data
                       hResult = CS_FAILURE;
                       Leave;
                     EndIf;

                   EndIf;

                 EndFor;

               EndIf;

               If hResult = CS_SUCCESS;

                 // Send last fragment
                 Size = CTLST_ItemSize(Instance.pResponseFrame: i);

                 If Size > 0;

                   Data = %Alloc(Size);
                   DataSize = Size; // cannot cast in RPG
                   CTLST_Get(Instance.pResponseFrame: Data: Size: i);

                   Rc = Send(Instance.pCONN:
                             CSWSCK_OPER_CONTINUATION:
                             Data:
                             DataSize:
                             CSWSCK_FIN_ON:
                             -1);

                   Dealloc Data;

                   If %bitand(Rc: CS_MASK_ERROR) = CS_FAILURE;
                     hResult = CS_FAILURE;
                   EndIf;

                 EndIf;

               EndIf;

             EndIf;

           EndIf;

         Else;
           // Could not send entire control frame
           hResult = CS_FAILURE;
         EndIf;

         Instance.ResponseFrameSize = 0;
         CTLST_Clear(Instance.pResponseFrame);
         Return hResult;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_LSeek...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Limit                         10I 0 Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)
     DhResult          S             10I 0

      /Free

       hResult = CS_FAILURE;
       If @Limit <= 0;
         @Limit = 1;
       EndIf;

       If (@Limit <= Instance.DataFrameSize);
         hResult = CS_SUCCESS;
         Instance.DataFrameOffset = @Limit;
       Else;
         // Basically, this is like EOF...
         Instance.DataFrameOffset = Instance.DataFrameSize + 1;
       EndIf;

       Return hResult;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_OpenService...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@ServiceName                   64A   Value
     D@SessionInfo                         LikeDS(CSAP_Session)

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

     DVtbl             DS                  LikeDS(IWSCKVtbl)
     D                                     Based(Instance.lpVtbl)

     DOpenConn...
     D                 Pr              *     ExtProc(VTbl.Open)
     D@sessionInfo                     *     Value
     D@sessionInfoFmt                10I 0   Value

     DSend...
     D                 Pr            10I 0   ExtProc(VTbl.Send)
     D@This                            *     Value
     D@Oeration                      10I 0   Value
     D@Data                            *     Value
     D@DataSize                      10I 0   Value
     D@FinState                      10I 0   Value
     D@TimeOut                       10I 0   Value

     DReceive...
     D                 Pr            10I 0   ExtProc(Vtbl.Receive)
     D@This                            *     Value
     D@DataSize                        *     Value
     D@TimeOut                       10I 0   Value

     DGetData...
     D                 Pr            10I 0   ExtProc(Vtbl.GetData)
     D@This                            *     Value
     D@Data                            *     Value
     D@Offset                        10I 0   Value
     D@Size                          10I 0   Value

     DCloseConn...
     D                 Pr            10I 0   ExtProc(VTbl.Close)
     D@This                            *     Value
     D@Data                            *     Value
     D@dataSize                      20U 0   Value
     D@timeout                       10I 0   Value

     DRc               S             10I 0
     DFlags            S             10I 0
     DhResult          S             10I 0
     DBytes            S             10I 0
     DSize             S             10I 0
     DSSLResult        S             10I 0
     DConnTimeout      S             10I 0
     DDataSize         S             20U 0
     DBuffer           S               *
     DHostBuffer       S            256A
     DAppID            S            128A
     DHost             S            256A
     DPort             S             10A
     DDiagCode         S              8A
     DReq              S              3A   Inz('EXC')
     DSessionInfo      DS                  LikeDS(CLIENTSESSIONINFO_100)
     DServiceName      S             64A
     DJsonData         DS                  LikeDS(CTJSP_DATA)

      /Free

         Instance.lpVtbl = %Alloc(%Size(IWSCKVtbl));

          Instance.ServiceName = @ServiceName;

          hResult = CS_FAILURE;
          Chain(n) (@ServiceName) CSAPCDIR;

          If %Found();

            // Lire le vrai nom de service
            @ServiceName = DIR001SERV;

            Select;

              When DIRX01SCMD = '*SSL';

                Clear SessionInfo;
                AppID = %Trim(DIRX01PID) + x'00';

                SessionInfo.szApplicationID = %Addr(AppID);

                Vtbl.Open       = %PAddr(CSWSCK_SecureConnect);
                Vtbl.Close      = %PAddr(CSWSCK_SecureClose);
                Vtbl.Receive    = %PAddr(CSWSCK_SecureReceive);
                Vtbl.Send       = %PAddr(CSWSCK_SecureSend);
                Vtbl.GetData    = %PAddr(CSWSCK_GetData);

              Other;

                Vtbl.Open       = %PAddr(CSWSCK_Connect);
                Vtbl.Close      = %PAddr(CSWSCK_Close);
                Vtbl.Receive    = %PAddr(CSWSCK_Receive);
                Vtbl.Send       = %PAddr(CSWSCK_Send);
                Vtbl.GetData    = %PAddr(CSWSCK_GetData);

            EndSl;

            If (Instance.pCONN <> *Null);

              Rc = CloseConn(Instance.pCONN: *Null: 0: -1);

            EndIf;

            Host = %Trim(DIR001HOST) + x'00';
            SessionInfo.szHostName = %Addr(Host);
            SessionInfo.port = %Int(DIR001PORT);

            Instance.pCONN = OpenConn(%Addr(SessionInfo):
                                     CFS_CLIENTSESSION_FMT_100);

            If Instance.pCONN <> *Null;

              ServiceName = '{"control":{"service": "' +
                                 %Trim(@ServiceName) + '"}}';
              DataSize = %Len(%Trim(ServiceName));

              Rc = Send(Instance.pCONN:
                        CSWSCK_OPER_TEXT:
                        %Addr(ServiceName):
                        DataSize:
                        CSWSCK_FIN_ON:
                        -1);

              If %bitand(Rc: CS_MASK_ERROR) = CS_SUCCESS;

                Rc = Receive(Instance.pCONN:
                             %Addr(DataSize):
                             -1);

                If %bitand(Rc: CS_MASK_ERROR) = CS_SUCCESS;

                  if DataSize > 0;

                    Buffer = %Alloc(DataSize);

                    GetData(Instance.pConn:
                            Buffer:
                            0:
                            DataSize);

                    // Control block is in JSON
                    CTBUFF_Set(Instance.pBuffer: Buffer: dataSize);
                    Dealloc Buffer;

                    Rc = CTJSP_Parse(Instance.pJsonIn: Instance.pBuffer);

                    If Rc = CS_SUCCESS;

                      Rc = CTJSP_Lookup(Instance.pJsonIn:
                                         '/control/diag':
                                         JsonData);

                      If Rc = CS_SUCCESS;

                        CSAP_PRIVATE_MemCpy(%Addr(DiagCode):
                                            Jsondata.Value: JsonData.Size);

                        If DiagCode = '00000000';

                          Rc = CTJSP_Lookup(Instance.pJsonIn:
                                             '/control/sessionid':
                                             JsonData);

                          If Rc = CS_SUCCESS;

                            CSAP_PRIVATE_MemCpy(%Addr(@SessionInfo.SessionID):
                                                 Jsondata.Value: 32);

                            hResult = CS_SUCCESS;

                          Else;
                            hResult = CS_SUCCESS;
                          EndIf;
                        Else;
                          hResult = CS_SUCCESS;
                        EndIf;

                      Else;
                        hResult = CS_SUCCESS;
                      EndIf;
                    Else;
                      hResult = CS_SUCCESS;
                    EndIf;
                  Else;
                    hResult = CS_SUCCESS;
                  EndIf;

                Else;
                  hResult = CS_SUCCESS;
                EndIf;
              Else;
                hResult = CS_SUCCESS;
              EndIf;

              If hResult = CS_FAILURE;
                CloseConn(Instance.pCONN: *Null: 0: -1);
                Instance.pCONN = *Null;
              EndIf;

            EndIf;

          Else;

            hResult = CS_FAILURE + CSAP_OPEN + CSAP_SRVNOTFOUND;

          EndIf;

          Return hResult;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_CloseService...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

     DVtbl             DS                  LikeDS(IWSCKVtbl)
     D                                     Based(Instance.lpVtbl)

     DCloseConn...
     D                 Pr            10I 0   ExtProc(VTbl.Close)
     D@This                            *     Value
     D@Data                            *     Value
     D@dataSize                      20U 0   Value
     D@timeout                       10I 0   Value

      /Free

          If (Instance.pCONN <> *Null);

            CloseConn(Instance.pCONN: *Null: 0: -1);
            Instance.pCONN = *Null;

          EndIf;

          Return CS_SUCCESS;

      /End-Free

     P                 E

      *-----------------------------------------------------------------------------
      *-----------------------------------------------------------------------------

     PCSAP_Flush...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DInstance         DS                  LikeDs(CSAP_Instance)
     D                                     Based(@This)

      /Free

        Instance.DataFrameSize = 0;
        CTBUFF_Set(Instance.pDataFrame: *Null: 0);
        CTLST_Clear(Instance.pResponseFrame);
        Return CS_SUCCESS;

      /End-Free

     P                 E
     
