
      *===================================================================
      * Package: CTBASE
      * Class:   CTLST
      * Source:  Implementation
      * Version: 01.00.00
      * ------------------------------------------------------------------
      * Copyright 2013 Clarasoft I.T. Solutions Inc.
      *===================================================================

     H NOMAIN

      /COPY CTBASEH

     DCTLST_PRIVATE_MemCpy...
     D                 PR                  ExtProc('memcpy')
     D@To                              *   Value
     D@From                            *   Value
     D@Len                           10I 0 Value

      * ------------------------------------------------------------------

     DCTLST_PRIVATE_Goto...
     D                 PR            10I 0
     D@This                            *   Value
     D@n                             10I 0 Value

      * ------------------------------------------------------------------

     DCTLST_PRIVATE_Next...
     D                 PR            10I 0
     D@This                            *   Value

      * ------------------------------------------------------------------

     DCTLST_PRIVATE_Previous...
     D                 PR            10I 0
     D@This                            *   Value

      * ------------------------------------------------------------------

     DCTLST_PRIVATE_CurIndex...
     D                 PR            10I 0
     D@This                            *   Value

      * ------------------------------------------------------------------

     DCTLST_Head       DS                  Based(Null)
     D                                     Qualified
     DCount                          10I 0
     DFirst                            *
     DLast                             *
     DCurrent                          *
     DCurIndex                       10I 0
     DNextIndex                      10I 0

      * ------------------------------------------------------------------

     DCTLST_Node       DS                  Based(Null)
     D                                     Qualified
     D Value                           *
     D Bytes                         10I 0
     D Next                            *
     D Prev                            *

      * ------------------------------------------------------------------

     PCTLST_Clear      B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     Dn                S             10I 0
     DCount            S             10I 0
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)

      /Free

            Count = Header.Count;

            For n = 1 To Count By 1;
               CTLST_Remove(@This: 1);
            EndFor;

            Return CS_SUCCESS;

      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_Constructor...
     P                 B                   EXPORT
     D                 PI              *

     DThis             S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(This)

      /Free

          This = %Alloc(%Size(CTLST_Head));

          Header.First    = *Null;
          Header.Last     = *Null;
          Header.Current  = *Null;
          Header.Count    = 0;
          Header.CurIndex = 0;

          Return This;

      /End-Free

     P                 E

      * ------------------------------------------------------------------

     PCTLST_Count      B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)

      /Free
         Return Header.Count;
      /End-Free

     P                 E

      * ------------------------------------------------------------------

     PCTLST_Destructor...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *

      /Free
          CTLST_Clear(@This);
          Dealloc @This;
          @This = *Null;
          Return CS_SUCCESS;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_Get        B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Value                           *   Value
     D@Bytes                         10I 0
     D@Index                         10I 0 Value

     DNodePtr          S               *
     DRc               S             10I 0
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)

      /Free

          If (Header.Count = 0);
             @Bytes = -1;
             Return CS_FAILURE;
          EndIf;

          Select;
           When @Index = CTLST_TOP;
            @Index = 1;
           When @Index = CTLST_BOTTOM;
            @Index = Header.Count;
          EndSl;

          If (@Index < 1 Or @Index > Header.Count);
            @Bytes = -1;
            return CS_FAILURE;
          EndIf;

          CTLST_PRIVATE_Goto(@This: @Index);

          Rc = CS_FAILURE;
          If ( Header.Current <> *Null );
             NodePtr = Header.Current;
             If (@Value <> *Null);
               If @Bytes < Node.Bytes;
                 CTLST_PRIVATE_MemCpy(@Value:
                                      Node.Value: @Bytes);
               Else;
                 CTLST_PRIVATE_MemCpy(@Value:
                                      Node.Value: Node.Bytes);
               EndIf;
               @Bytes = Node.Bytes;
             Else;
               @Bytes = 0;
             EndIf;
             Rc = CS_SUCCESS;
          Else;
            @Bytes = -1;
          EndIf;

          Return Rc;

      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_GetItemRef...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@ItemRef                         *
     D@Bytes                         10I 0
     D@Index                         10I 0 Value

     DNodePtr          S               *
     DRc               S             10I 0
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)

      /Free

          @ItemRef = *Null;
          If (Header.Count = 0);
             @Bytes = -1;
             Return CS_FAILURE;
          EndIf;

          Select;
           When @Index = CTLST_TOP;
            @Index = 1;
           When @Index = CTLST_BOTTOM;
            @Index = Header.Count;
          EndSl;

          If (@Index < 1 Or @Index > Header.Count);
            @Bytes = -1;
            return CS_FAILURE;
          EndIf;

          CTLST_PRIVATE_Goto(@This: @Index);

          Rc = CS_FAILURE;
          If ( Header.Current <> *Null );
             NodePtr = Header.Current;
             @ItemRef = Node.Value;
             @Bytes = Node.Bytes;
             Rc = CS_SUCCESS;
          Else;
            @Bytes = -1;
          EndIf;

          Return Rc;

      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_Insert...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Value                           *   Value
     D@Bytes                         10I 0 Value
     D@Index                         10I 0 Value

     DNodePtr          S               *
     DpLast            S               *
     DpCurrent         S               *
     DpPrevious        S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)
     DLastNode         DS                  LikeDs(CTLST_Node) Based(pLast)
     DCurNode          DS                  LikeDs(CTLST_Node) Based(pCurrent)
     DPrevious         DS                  LikeDs(CTLST_Node) Based(pPrevious)
     DRc               S             10I 0

      /Free

          NodePtr = %Alloc(%Size(CTLST_Node));

          If (NodePtr = *Null);
            Return CS_FAILURE;
          EndIf;

          Rc = CS_SUCCESS;
          Node.Next    = *Null;
          Node.Prev    = *Null;

          If (@Value <> *Null And @Bytes > 0);
            Node.Value = %Alloc(@Bytes);
            CTLST_PRIVATE_MemCpy(Node.Value: @Value: @Bytes);
            Node.Bytes = @Bytes;
          Else;
            Node.Value = *Null;
            Node.Bytes = 0;
          EndIf;

          If ( Header.First  = *Null );
             Header.First    = NodePtr;
             Header.Last     = NodePtr;
             Header.CurIndex = 1;
          Else;
             If (@Index = CTLST_TOP);
               CTLST_PRIVATE_Goto(@This: 1);
               pCurrent = Header.Current;
               CurNode.Prev = NodePtr;
               Node.Next    = pCurrent;
               Header.First = NodePtr;
               Header.CurIndex = 1;

             Else;
               If (@Index = CTLST_BOTTOM);

                 pLast = Header.Last;
                 LastNode.Next   = NodePtr;
                 Node.Prev       = pLast;
                 Header.Last     = NodePtr;
                 Header.CurIndex = Header.Count + 1;

               Else;

                 If (@Index < 1  Or @Index > Header.Count);
                   Rc = CS_FAILURE;
                 Else;
                   CTLST_PRIVATE_Goto(@This: @Index);
                   pCurrent  = Header.Current;
                   pPrevious = CurNode.Prev;

                   Node.Next = pCurrent;
                   Node.Prev = pPrevious;

                   If (pCurrent <> *Null);
                     CurNode.Prev =  NodePtr;
                   Endif;

                   If (pPrevious <> *Null);
                     Previous.Next = NodePtr;
                   Else;
                     Header.First = NodePtr;
                   Endif;
                 EndIf;
               EndIf;
             EndIF;

          EndIf;

          If (Rc = CS_SUCCESS);
            Header.Current  = NodePtr;
            Header.Count    = Header.Count + 1;
          EndIf;
          Return Rc;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_ItemSize...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Index                         10I 0 Value

     DNodePtr          S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node)
     D                                     Based(Header.Current)

      /Free

          If (Header.Count = 0);
             Return -1;
          EndIf;

          Select;
           When @Index = CTLST_TOP;
            @Index = 1;
           When @Index = CTLST_BOTTOM;
            @Index = Header.Count;
          EndSl;

          If (@Index < 1 Or @Index > Header.Count);
            return -1;
          EndIf;

          CTLST_PRIVATE_Goto(@This: @Index);

          If (Header.Current <> *Null);
             Return Node.Bytes;
          EndIf;

          Return 0;

      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_IterNext...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Value                           *   Value
     D@Bytes                         10I 0

     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DRc               S             10I 0

      /Free
          If Header.NextIndex <= Header.Count;
            CTLST_Get(@This: @Value: @Bytes: Header.NextIndex);
            Header.NextIndex += 1;
            Rc = CS_SUCCESS;
          Else;
            Rc = CS_FAILURE;
          EndIf;
          Return Rc;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_IterNextSize...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DCurNode          DS                  LikeDs(CTLST_Node)
     D                                     Based(Header.Current)
     DRc               S             10I 0

      /Free

          If Header.NextIndex <= Header.Count;
            CTLST_PRIVATE_Goto(@This: Header.NextIndex);
            Return CurNode.Bytes;
          Else;
            Return -1;
          EndIf;

      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_IterStart...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value

     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DRc               S             10I 0

      /Free
          If Header.Count > 0;
            Header.NextIndex = 1;
            Rc = CS_SUCCESS;
          Else;
            Rc = CS_FAILURE;
          EndIf;

          Return Rc;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_Remove...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Index                         10I 0 Value

     DTempPtr          S               *
     DTempPtr2         S               *
     DCurPtr           S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DTempNode         DS                  LikeDs(CTLST_Node) Based(TempPtr)
     DTempNode2        DS                  LikeDs(CTLST_Node) Based(TempPtr2)
     DCurNode          DS                  LikeDs(CTLST_Node) Based(CurPtr)
     DRc               S             10I 0

      /Free

          If (Header.Count = 0);
             Return CS_FAILURE;
          EndIf;

          Rc = CS_SUCCESS;

          If (@Index = CTLST_TOP);
            Rc = CTLST_PRIVATE_Goto(@This: 1);
          Else;
            If (@Index = CTLST_BOTTOM);
              Rc = CTLST_PRIVATE_Goto(@This: Header.Count);
            Else;
              If (@Index < 1 Or @Index > Header.Count);
                Rc = CS_FAILURE;
              Else;
                Rc = CTLST_PRIVATE_Goto(@This: @Index);
              EndIf;
            EndIf;
          EndIf;

          If (Rc = CS_SUCCESS);

            TempPtr = Header.Current;

            If (Header.Count = 1);
               Header.First    = *Null;
               Header.Last     = *Null;
               Header.Current  = *Null;
               Header.CurIndex = 0;
            Else;
               If (TempPtr = Header.Last);
                   Header.Last     = TempNode.Prev;
                   CurPtr          = TempNode.Prev;
                   CurNode.Next    = *Null;
                   Header.Current  = CurPtr;
                   Header.CurIndex = Header.CurIndex - 1;
               Else;
                  If (TempPtr = Header.First);
                     Header.First   = TempNode.Next;
                     CurPtr         = TempNode.Next;
                     CurNode.Prev   = *Null;
                     Header.Current = CurPtr;
                  Else;
                     CurPtr          = TempNode.Prev;
                     CurNode.Next    = TempNode.Next;
                     TempPtr2        = TempNode.Next;
                     TempNode2.Prev  = CurPtr;
                     Header.Current  = CurPtr;
                     Header.CurIndex = Header.CurIndex - 1;
                  EndIf;
               EndIf;
            EndIf;

            If TempNode.Value <> *Null;
              Dealloc TempNode.Value;
            EndIf;

            Dealloc TempPtr;
            Header.Count = Header.Count - 1;
          EndIf;

          Return Rc;

      /End-Free

     P                 E

      * ------------------------------------------------------------------

     PCTLST_Set...
     P                 B                   EXPORT
     D                 PI            10I 0
     D@This                            *   Value
     D@Value                           *   Value
     D@Bytes                         10I 0 Value
     D@Index                         10I 0 Value

     DNodePtr          S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)

      /Free

          If (Header.Count = 0);
             Return CS_FAILURE;
          EndIf;

          Select;
           When @Index = CTLST_TOP;
            @Index = 1;
           When @Index = CTLST_BOTTOM;
            @Index = Header.Count;
          EndSl;

          If (@Index < 1 Or @Index > Header.Count);
            return CS_FAILURE;
          EndIf;

          CTLST_PRIVATE_Goto(@This: @Index);

          If ( Header.Current <> *Null );
             NodePtr = Header.Current;
             If (Node.Value <> *Null);
               Dealloc Node.Value;
             EndIf;
             If (@Value <> *Null And @Bytes > 0);
               Node.Value = %Alloc(@Bytes);
               Node.Bytes = @Bytes;
               CTLST_PRIVATE_MemCpy(Node.Value:
                                    @Value: Node.Bytes);
             Else;
               Node.Value = *Null;
               Node.Bytes = 0;
             EndIf;

             Return CS_SUCCESS;
          EndIf;

          Return CS_FAILURE;
      /End-Free
     P                 E

      * ------------------------------------------------------------------
      * Private methods
      * ------------------------------------------------------------------

     PCTLST_PRIVATE_CurIndex...
     P                 B
     D                 PI            10I 0
     D@This                            *   Value

     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)

      /Free
           Return Header.CurIndex;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_PRIVATE_Goto...
     P                 B
     D                 PI            10I 0
     D@This                            *   Value
     D@n                             10I 0 Value

     DPtr              S               *
     Di                S             10I 0
     DDelta            S             10I 0
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(Ptr)

      /free
            If ( @n = 0 );
                 Return CS_FAILURE;
            EndIf;

            If (@n > Header.Count);
              Return CS_FAILURE;
            EndIf;

            If ( @n = Header.CurIndex );
                 Return CS_SUCCESS;
            EndIf;

            If ( @n = 1 );
                 Header.Current = Header.First;
                 Header.CurIndex = 1;
                 Return CS_SUCCESS;
            EndIf;

            If ( @n >= Header.Count );
                 Header.Current = Header.Last;
                 Header.CurIndex = Header.Count;
                 Return CS_SUCCESS;
            EndIf;

            If ( @n <> Header.CurIndex );
              If ( @n > Header.CurIndex );
                Delta = @n - Header.CurIndex;
                For i=1 By 1 To Delta;
                    Ptr = Header.Current;
                    Header.Current = Node.Next;
                EndFor;
              Else;
                Delta = Header.CurIndex - @n;
                For i=1 By 1 To Delta;
                  Ptr = Header.Current;
                  Header.Current = Node.Prev;
                EndFor;
              EndIf;
            EndIf;

            Header.CurIndex = @n;
            Return CS_SUCCESS;

      /end-free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_PRIVATE_Next...
     P                 B
     D                 PI            10I 0
     D@This                            *   Value

     DNodePtr          S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)
      /Free
           If (Header.Count > 0);
             NodePtr = Header.Current;
             If (Node.Next <> *null);
                Header.Current = Node.Next;
                Header.CurIndex = Header.CurIndex + 1;
                Return CS_SUCCESS;
             EndIf;
           EndIf;
           Return CS_FAILURE;
      /End-Free
     P                 E

      * ------------------------------------------------------------------

     PCTLST_PRIVATE_Previous...
     P                 B
     D                 PI            10I 0
     D@This                            *   Value

     DNodePtr          S               *
     DHeader           DS                  LikeDs(CTLST_Head) Based(@This)
     DNode             DS                  LikeDs(CTLST_Node) Based(NodePtr)
      /Free
           If (Header.Count > 0);
             NodePtr = Header.Current;
             If (Node.Prev <> *null);
                Header.Current = Node.Prev;
                Header.CurIndex = Header.CurIndex - 1;
                Return CS_SUCCESS;
             EndIf;
           EndIf;
           Return CS_FAILURE;
      /End-Free
     P                 E
